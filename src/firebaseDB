// src/firebaseDB.js
import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, addDoc, updateDoc, deleteDoc, doc, onSnapshot } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: "AIzaSyB0vz-jtc7PRpdFfQUKvU9PevLEV8zYzO4",
  authDomain: "nextlives-panel-soporte.firebaseapp.com",
  projectId: "nextlives-panel-soporte",
  storageBucket: "nextlives-panel-soporte.appspot.com",
  messagingSenderId: "52725281576",
  appId: "1:52725281576:web:4402c0507962074345161d"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Funciones
export const obtenerUsuarios = async () => {
  const agentesRef = collection(db, "agentes"); // <- cambiado a agentes
  const snapshot = await getDocs(agentesRef);
  return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

export const crearUsuario = async (nuevoUsuario) => {
  const agentesRef = collection(db, "agentes"); // <- cambiado a agentes
  await addDoc(agentesRef, nuevoUsuario);
};

export const actualizarUsuario = async (id, datosActualizados) => {
  const agenteRef = doc(db, "agentes", id); // <- cambiado a agentes
  await updateDoc(agenteRef, datosActualizados);
};

export const eliminarUsuario = async (id) => {
  const agenteRef = doc(db, "agentes", id); // <- cambiado a agentes
  await deleteDoc(agenteRef);
};

// FunciÃ³n para escuchar cambios en tiempo real
export const escucharUsuarios = (callback) => {
  const agentesRef = collection(db, "agentes"); // <- cambiado a agentes
  return onSnapshot(agentesRef, (snapshot) => {
    const lista = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    callback(lista);
  });
};
